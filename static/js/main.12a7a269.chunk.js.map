{"version":3,"sources":["API-options.js","App.js","serviceWorker.js","index.js"],"names":["options","method","mode","headers","postAPI","query","body","JSON","stringify","fetch","catch","error","console","log","App","useState","value","setValue","setOptions","open","setOpen","className","type","onChange","e","currentTarget","then","response","json","result","suggestions","length","map","option","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mQAoBIA,G,YAAU,CACVC,OAAQ,OACRC,KAAM,OACNC,QAAS,CACL,eAAgB,mBAChB,OAAU,mBACV,cAAiB,oDAKZC,EAAU,SAETC,GAEN,OADAL,EAAQM,KAAOC,KAAKC,UAAU,CAACH,MAAOA,IAC/BI,MAnBL,uEAmBgBT,GAIjBU,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,QAASF,O,MCkB9BG,MA5Cf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGeF,mBAAS,IAHxB,mBAGRf,EAHQ,KAGCkB,EAHD,OAISH,oBAAS,GAJlB,mBAIRI,EAJQ,KAIFC,EAJE,KAoBb,OACE,yBAAKC,UAAU,OACb,mIACA,kLACA,yBAAKA,UAAW,cACd,2BAAOC,KAAK,OAAON,MAAOA,EAAOO,SAnBhB,SAACC,GAGtBpB,EAAkBoB,EAAEC,cAAcT,OACjCU,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIX,EAAWW,EAAOC,gBACjCJ,KAAKd,QAAQC,IAAIb,IAElBiB,EAASO,EAAEC,cAAcT,OACzBI,GAAQ,GACRR,QAAQC,IAAIG,MAUPG,GAAQnB,EAAQ+B,OAAS,GAC1B,wBAAIV,UAAW,cACZrB,EAAQgC,KAAI,SAAAC,GAAM,OACjB,wBAAIZ,UAAW,kBAAmBa,QAAS,SAACV,GAC1CJ,GAAQ,GACRH,EAASgB,EAAOjB,SACfiB,EAAOjB,cCjCFmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdvC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMuC,c","file":"static/js/main.12a7a269.chunk.js","sourcesContent":["import * as axios from 'axios';\n\n// const instance = axios.create({\n//     baseURL: 'https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest',\n//     options:{\n//       method: \"POST\",\n//       mode: \"cors\",\n//       headers: {\n//           \"Content-Type\": \"application/json\",\n//           \"Accept\": \"application/json\",\n//           \"Authorization\": \"Token \" + \"51546c8e1e173abdcd1642337144847963b066dc\"\n//       },\n//       body: JSON.stringify({query: \"москва хабар\"})\n//     }\n//   })\n\nvar url = \"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/address\";\nvar token = \"51546c8e1e173abdcd1642337144847963b066dc\";\n// var query = \"москва хабар\";\n\nvar options = {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\",\n        \"Authorization\": \"Token \" + token\n    },\n    // body: JSON.stringify({query: query})\n}\n\nexport const postAPI = {\n    \n    postQuery(query) {\n        options.body = JSON.stringify({query: query})\n        return fetch(url, options)\n        // .then(response => response.text())\n        // .then(result => console.log(result))\n        // .then(result => {return result.json()})\n        .catch(error => console.log(\"error\", error));\n\n\n        // return instance.post('/address'\n        //     // {\n        //     //     body: {\"query\": query}\n        //     // }\n        // )\n        //     .then(result => console.log(result.data))\n        //     .catch(error => console.log(\"error\", error));;\n    }\n}\n\n\n// var url = \"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/address\";\n// var token = \"51546c8e1e173abdcd1642337144847963b066dc\";\n// var query = \"москва хабар\";\n\n// var options = {\n//     method: \"POST\",\n//     mode: \"cors\",\n//     headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"Accept\": \"application/json\",\n//         \"Authorization\": \"Token \" + token\n//     },\n//     body: JSON.stringify({query: query})\n// }\n\n// fetch(url, options)\n// .then(response => response.text())\n// .then(result => console.log(result))\n// .catch(error => console.log(\"error\", error));\n\n","import React, { useState } from 'react';\nimport './App.css';\nimport { postAPI } from './API-options';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport AppSub from './AppSub';\n\nconst top100Films = [\n  { title: 'The Shawshank Redemption', year: 1994 },\n  { title: '3 Idiots', year: 2009 },\n  { title: 'Monty Python and the Holy Grail', year: 1975 },\n];\n\nfunction App() {\n\n  const [value, setValue] = useState('');\n  let [options, setOptions] = useState([]);\n  let [open, setOpen] = useState(false)\n\n  const getSuggestions = (e) => {\n    // setValue(postAPI.postQuery(e.currentTarget.value));\n    // setOptions(postAPI.postQuery(e.currentTarget.value));\n    postAPI.postQuery(e.currentTarget.value)\n    .then(response => response.json())\n    .then(result => setOptions(result.suggestions))\n    .then(console.log(options))\n     \n    setValue(e.currentTarget.value);\n    setOpen(true);\n    console.log(value);\n    \n  }\n\n  return (\n    <div className=\"App\">\n      <h2>Тестовое задание CatCode</h2>\n      <h4>Выполнил Сарсенов Муратбек</h4>\n      <div className={\"form-group\"}>\n        <input type=\"text\" value={value} onChange={getSuggestions} />\n        {open && options.length > 0 &&\n        <ul className={\"list-group\"}>\n          {options.map(option =>\n            <li className={\"list-group-item\"} onClick={(e) => {\n              setOpen(false);\n              setValue(option.value)}} >         \n              {option.value}\n            </li>\n          )}\n        </ul>\n        }        \n       \n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n\n\n{/* <Autocomplete\n        inputValue={value}\n        onInputChange={getSuggestions}\n        onChange={(event, newValue) => {\n          setValue(newValue);\n        }}\n        freeSolo\n        id=\"free-solo-2-demo\"\n        \n        options={options.map((option) => option.value)}\n        getOptionSelected={(option, value) => option = value}\n        // options={top100Films.map((option) => option.title)}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Search input\"\n            margin=\"normal\"\n            variant=\"outlined\"\n            InputProps={{ ...params.InputProps, type: 'search' }}\n          />\n        )}\n        /> */}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}